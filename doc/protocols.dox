
# Network Protocols

Describes the network protocols used for communicating with a client device
and with the update server.

These protocols were intended to be very simple and human readable to aid in
both implementation simplicity and transparency.

## Client Protocol

A client device connecting to the `nsids` service will receive ASCII text that
contains either:

- No data (just an EOF)
- One or more "event" descriptions, separated by two newlines (`\n`)

The fields of each event consist of a key separated from its value by a colon
and whitespace. Each field is delimited by a newline (`\n`). An event consists of the following fields with the value specified using `printf` formatting:

- `IOC: %s`
- `Timestamp: %11lu`
- `Occurrences: %d`
- `Interface: %s`
- `Src-IP: %s`
- `Src-MAC: %02X-%02X-%02X-%02X-%02X-%02X`

The end of the stream is signalled by sending an extra line containing only a `\n` character .Once the `nsids` service has finished sending the data, it will
immediately close the TCP stream in order to conserve resources.

### Event Field descriptions

#### IOC

The name of the Indicator of Compromise (IoC) responsible for this event. This
value is usually the offending IP address or domain name that appeared in the
blacklist.

#### Timestamp

The timestamp of the last occurrence of the event in UNIX timstamp format.

#### Interface

The network interface on the router on which the event was observed. Note that
this field is currently not implemented.

#### Src-IP

The source IPv4 address of the packet that generated the event. This is the IP
address of the compromised device. It is presented in typical dotted quad format

#### Src-MAC

The source MAC address of the packet that generated the event. This is the MAC
address of the compromised device. It is presented in upper-case hexadecimal
with bytes delimited by `-` (instead of the more typical `:` delimiter)

### Event Example

```plaintext
IOC: abadwebsite.com
Timestamp: 1586313317
Occurrences: 1
Interface: lan
Src-IP: 192.168.1.2
Src-MAC: FF-FF-FF-FF-FF-FF

IOC: anotherbadwebsite.com
Timestamp: 1586313400
Occurrences: 3
Interface: lan
Src-IP: 192.168.1.2
Src-MAC: FF-FF-FF-FF-FF-FF

```

This shows two different types events generated by the same device. The first
event has been observed once, while the second has been observed three times.

## Update Protocol

IoC database updates are done utilising a remote server that is connected to
using TLS and a custom text-based protocol is used to download the records.

Once a connection to the server is established, the server will report the
protocol version that it is using (currently, there is only one version `v1`)
to which the client will respond with an operation (currently, only
`OPERATION: UPDATE`). The server will then send all IoCs to the client using
the text format below. Once the client has recieved the data it responds with
`UPDATE CONFIRMED` or `ERROR` and closes the connection.

The update protocol is implented in \ref update.c

### IoC Format

An IoC record is in a key-value format where the key and value is separated by
a `:`. The key is one of `DN_IOC` or `IP_IOC` depending on which type of IoC it
is. A record is delimited by a newline character (`\n`). The end of the IoCs is
signalled by a line containing only a `\n` character.

A `DN_IOC` simply contains the domain name as its value.

An `IP_IOC` contains a dotted-quad IPv4 address and a port number as its value.

### Update Example

Lines beginning with `>>>` are sent _to_ the server while lines beginning with
`<<<` are received _from_ the server.

```plaintext
<<< v1
>>> OPERATION: UPDATE
<<< IP_IOC: 1.2.3.4 80
<<< IP_IOC: 1.2.3.3 443
<<< DN_IOC: abadwebsite.com
<<< DN_IOC: anotherbadwebsite.com
<<<
>>> UPDATE CONFIRMED
>>>
>>> EOF
```

The server will likely respond with a few thousand IoC records, so a client
(such as `nsids`) should be prepared for that and either utilize a streaming
reader or have sufficient buffer space prepared.

The `nsids` service streams the incoming data into a pair of memory efficient
binary structures in memory to avoid having to store the full text of an update.
